using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.IO;
using Mirror;
using EMI.Object;
using Invector.vCharacterController;
using EMI.Utils;
using Invector.vCharacterController.vActions;
using Invector;
using Invector.vCamera;
using EMI.Player;
using System;

namespace EMI.Menus
{
    public partial class ObjectConverter
    {
        partial void ExecuteStandaloneConvertSO(string itemListPath, string savePath);

        // Generated by other packages for characters
        partial void ConvertMeleeCharacter(GameObject target);
        partial void ConvertShooterCharacter(GameObject target);
        partial void ConvertSwimmingCharacter(GameObject target);
        partial void ConvertFreeClimbCharacter(GameObject target);
        partial void ConvertZiplineCharacter(GameObject target);

        // convert AI
        partial void ConvertMeleeAI(GameObject target);
        partial void ConvertShooterAI(GameObject target);

        // convert objects
        partial void ConvertMeleeObject(GameObject target);
        partial void ConvertShooterObject(GameObject target);

        // root call functions
        partial void ConvertObject(GameObject target, bool unpack)
        {
            try
            {
                if (target.GetComponent("v_AIController") || target.GetComponent("MP_v_AIController"))
                {
                    ConvertAI(target, unpack);
                }
                else if (target.GetComponent<vThirdPersonController>())
                {
                    ConvertCharacter(target, unpack);
                }
                else
                {
                    ConvertSingleObj(target, unpack);
                }
            }
            catch(Exception ex)
            {
                Debug.LogError(ex);
            }
        }
        partial void ConvertPrefabs(List<string> prefabPaths, string savePath, bool unpack)
        {
            string directory = "";
            directory = savePath;
            if (!directory.Contains(Application.dataPath))
            {
                directory = $"{Application.dataPath}/{directory}";
                directory = savePath.Replace("/Assets/Assets/", "/Assets/");
            }
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            foreach(string prefabPath in prefabPaths)
            {
                // copy the original and target the copy
                string fileName = (!Path.GetFileName(prefabPath).StartsWith("MP_")) ? $"MP_{Path.GetFileName(prefabPath)}" : Path.GetFileName(prefabPath);
                if (fileName.Contains(".asset"))
                {
                    ExecuteStandaloneConvertSO(prefabPath, savePath);
                }
                else
                {
                    string newAssetPath = $"{savePath}/{fileName}";
                    AssetDatabase.CopyAsset(prefabPath, newAssetPath);
                    AssetDatabase.Refresh();
                    GameObject target = PrefabUtility.LoadPrefabContents(newAssetPath);
                    ConvertObject(target, unpack);
                    PrefabUtility.SaveAsPrefabAsset(target, newAssetPath);
                    PrefabUtility.UnloadPrefabContents(target);
                }
            }
            AssetDatabase.Refresh();
        }
        partial void StandaloneConvertObject(GameObject inputTarget, string savePath, bool unpack)
        {
            string directory = "";
            directory = savePath;
            if (!directory.Contains(Application.dataPath))
            {
                directory = $"{Application.dataPath}/{directory}";
                directory = savePath.Replace("/Assets/Assets/", "/Assets/");
            }
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            bool isPrefab = AssetDatabase.Contains(inputTarget);
            string prefabPath = "";
            GameObject target;
            if (isPrefab)
            {
                // already a prefab
                // copy the original and target the copy
                string path = AssetDatabase.GetAssetPath(inputTarget);
                prefabPath = $"{savePath}/{Path.GetFileName(path)}";
                AssetDatabase.CopyAsset(path, prefabPath);
                AssetDatabase.Refresh();
                target = PrefabUtility.LoadPrefabContents(prefabPath);
            }
            else if (inputTarget.scene == null)
            {
                // not a prefab
                //Create a prefab from the gameobject and modify the prefab
                string saveName = (inputTarget.name.Contains("MP_")) ? inputTarget.name : $"MP_{inputTarget.name}";
                prefabPath = $"{savePath}/{saveName}";
                AssetDatabase.CreateAsset(inputTarget, prefabPath);
                target = PrefabUtility.LoadPrefabContents(prefabPath);
            }
            else
            {
                target = inputTarget;
            }

            ConvertObject(target, unpack);

            if (inputTarget.scene == null)
            {
                PrefabUtility.SaveAsPrefabAsset(target, prefabPath);
                PrefabUtility.UnloadPrefabContents(target);
                AssetDatabase.Refresh();
            }
        }
        
        // supporting wrapper functions
        partial void ConvertAI(GameObject target, bool unpack)
        {
            if (unpack && PrefabUtility.GetPrefabInstanceStatus(target) != PrefabInstanceStatus.NotAPrefab)
            {
                GameObject instanceRoot = PrefabUtility.GetNearestPrefabInstanceRoot(target);
                PrefabUtility.UnpackPrefabInstance(instanceRoot, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
            }

            ConvertShooterAI(target);
            ConvertMeleeAI(target);
        }
        partial void ConvertSingleObj(GameObject target, bool unpack)
        {
            // Call other parent packages first
            ConvertShooterObject(target);
            ConvertMeleeObject(target);

            // proceed with basic convert
            if (unpack && PrefabUtility.GetPrefabInstanceStatus(target) != PrefabInstanceStatus.NotAPrefab)
            {
                GameObject instanceRoot = PrefabUtility.GetNearestPrefabInstanceRoot(target);
                PrefabUtility.UnpackPrefabInstance(instanceRoot, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
            }

            if (target.GetComponentInChildren<vObjectDamage>(true))
            {
                GameObject child = target.GetComponentInChildren<vObjectDamage>(true).gameObject;
                ReplaceComponent(child, typeof(vObjectDamage), typeof(MP_vObjectDamage));
            }
            if (target.GetComponentInChildren<vPickupItem>(true))
            {
                GameObject child = target.GetComponentInChildren<vPickupItem>(true).gameObject;
                if (!child.GetComponent<NetworkIdentity>())
                {
                    child.AddComponent<NetworkIdentity>();
                }
            }
            if (target.GetComponentInChildren<vHUDController>(true))
            {
                GameObject child = target.GetComponentInChildren<vHUDController>(true).gameObject;
                ReplaceComponent(child, typeof(vHUDController), typeof(MP_vHUDController));
            }
            if (target.GetComponentInChildren<vTutorialTextTrigger>(true))
            {
                GameObject child = target.GetComponentInChildren<vTutorialTextTrigger>(true).gameObject;
                ReplaceComponent(child, typeof(vTutorialTextTrigger), typeof(MP_vTutorialTextTrigger));
            }
            if (target.GetComponent<vSimpleDoor>())
            {
                ReplaceComponent(target, typeof(vSimpleDoor), typeof(MP_vSimpleDoor));
                if (!target.GetComponent<DoorNetworkCalls>())
                {
                    target.AddComponent<DoorNetworkCalls>();
                }
                target.GetComponent<DoorNetworkCalls>().syncInterval = 0;
                if (!target.GetComponent<NetworkIdentity>())
                {
                    target.AddComponent<NetworkIdentity>();
                }
            }
            if (target.GetComponentInChildren<NetworkIdentity>(true))
            {
                GameObject child = target.GetComponentInChildren<NetworkIdentity>(true).gameObject;
                if (child.transform.parent != null)
                {
                    child.transform.parent = null;
                }
            }

            // Now can convert add-ons
            ConvertSwimmingCharacter(target);
            ConvertFreeClimbCharacter(target);
            ConvertZiplineCharacter(target);
        }
        partial void ConvertCharacter(GameObject target, bool unpack)
        {
            if (unpack && PrefabUtility.GetPrefabInstanceStatus(target) != PrefabInstanceStatus.NotAPrefab)
            {
                GameObject instanceRoot = PrefabUtility.GetNearestPrefabInstanceRoot(target);
                PrefabUtility.UnpackPrefabInstance(instanceRoot, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
            }

            // Call other parent packages first
            ConvertShooterCharacter(target);
            ConvertMeleeCharacter(target);

            // proceed with basic convert
            if (!target.GetComponent<NetworkIdentity>())
            {
                target.AddComponent<NetworkIdentity>();
            }
            if (!target.GetComponent<ServerSync>())
            {
                target.AddComponent<ServerSync>();
                target.GetComponent<ServerSync>().syncInterval = 0;
            }

            ReplaceComponent(target, typeof(vThirdPersonInput), typeof(MP_vThirdPersonInput));
            ReplaceComponent(target, typeof(vLadderAction), typeof(MP_vLadderAction));
            ReplaceComponent(target, typeof(vHeadTrack), typeof(MP_vHeadTrack));
            ReplaceComponent(target, typeof(vThirdPersonController), typeof(MP_vThirdPersonController));
            ReplaceComponent(target, typeof(vGenericAction), typeof(MP_vGenericAction));
            ReplaceComponent(target, typeof(vHitDamageParticle), typeof(MP_vHitDamageParticle));
            if (target.GetComponentInChildren<vThirdPersonCamera>(true))
            {
                if (PrefabUtility.GetPrefabInstanceStatus(target.GetComponentInChildren<vThirdPersonCamera>(true).gameObject) != PrefabInstanceStatus.NotAPrefab)
                {
                    GameObject instanceRoot = PrefabUtility.GetNearestPrefabInstanceRoot(target.GetComponentInChildren<vThirdPersonCamera>(true).gameObject);
                    PrefabUtility.UnpackPrefabInstance(instanceRoot, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
                }
                MonoBehaviour.DestroyImmediate(target.GetComponentInChildren<vThirdPersonCamera>(true).gameObject, true);
            }
            if (target.GetComponentInChildren<Canvas>(true))
            {
                foreach(Canvas canvas in target.GetComponentsInChildren<Canvas>(true))
                {
                    if (canvas != null && canvas.gameObject.GetComponentInChildren<vHUDController>(true))
                    {
                        if (PrefabUtility.GetPrefabInstanceStatus(canvas.gameObject) != PrefabInstanceStatus.NotAPrefab)
                        {
                            GameObject instanceRoot = PrefabUtility.GetNearestPrefabInstanceRoot(canvas.gameObject);
                            PrefabUtility.UnpackPrefabInstance(instanceRoot, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);
                        }
                        MonoBehaviour.DestroyImmediate(canvas.gameObject, true);
                    }
                }
            }
            if (!target.GetComponent("ShooterNetworkCalls") || !target.GetComponent("MeleeNetworkCalls"))
            {
                if (!target.GetComponent<BasicNetworkCalls>())
                {
                    target.AddComponent<BasicNetworkCalls>();
                }
                target.GetComponent<BasicNetworkCalls>().syncInterval = 0;
            }

            // Now can convert Add-Ons
            ConvertSwimmingCharacter(target);
            ConvertFreeClimbCharacter(target);
            ConvertZiplineCharacter(target);

            Debug.Log($"Converted {target}");
        }
        
        // helper function
        protected virtual void ReplaceComponent(GameObject target, System.Type source, System.Type dest)
        {
            if (target.GetComponent(source) && !target.GetComponent(dest))
            {
                target.AddComponent(dest);
                EditorUtils.DeepCopyValues(target.GetComponent(source), target.GetComponent(dest));
                MonoBehaviour.DestroyImmediate(target.GetComponent(source));
            }
        }
    }
}
